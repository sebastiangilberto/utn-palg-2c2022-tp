@startuml

interface PersistentObjects {
  +void creteSession(long, long)
  +void store(long, Object)
  +Object load(long, Class<?>)
  +Object remove(long, Class<?>)
  +void destroySession(long)
  +void addListener(SessionListener)
  +void removeListener(SessionListener)
}

class PersistentObjectsImpl {
  Notifier: Notifier
  Mapper: ObjectDetailsMapper
  Session: Session
  Repository: ObjectDetailsRepository
}

interface Notifier {
  +void sessionClosed(long)
  +void sessionStillClosed(long)
  +void sessionOpened(long)
  +void sessionStillOpened(long)
  +void addListener(SessionListener)
  +void removeListener(SessionListener)
}

class SequentialNotifier {
  Listeners: List<SessionListener>
}

interface SessionListener {
  +void sessionClosed(long)
  +void sessionStillClosed(long)
  +void sessionOpened(long)
  +void sessionStillOpened(long)
}

class LoggerSessionListener {
  Logger: Logger
}

class Session {
  Key: String
  Timeout: int
  Status: SessionStatus
  +void close()
  +void open()
}

enum SessionStatus{
  OPEN, CLOSED
}

class ObjectDetailsMapper {
  +toObject(String, Class)
  +toJson(Object)
}

class ObjectDetailsRepository {
  +findByKey(String)
  +deleteByKey(String)
}

interface CrudRepository{
  +save(Entity)
}

LoggerSessionListener --|> SessionListener
PersistentObjectsImpl --|> PersistentObjects
PersistentObjectsImpl --> Session
PersistentObjectsImpl --> ObjectDetailsMapper
PersistentObjectsImpl --> ObjectDetailsRepository
PersistentObjectsImpl --> Notifier
SequentialNotifier --|> Notifier
Notifier "1" --> "N" SessionListener
Session --> SessionStatus
ObjectDetailsRepository --|> CrudRepository

@enduml